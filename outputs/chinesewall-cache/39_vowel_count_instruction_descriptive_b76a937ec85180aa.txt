[1734, 1743]
import string

def prepare_line(line):
    for char in string.punctuation:
        line = line.replace(char, "")
    for char in string.digits:
        line = line.replace(char, "")
    return line

def vowel_count(line):
    vowel_count = 0
    # EDIT: To perform the different counting steps, it's best to have the cleaned-up line available in a variable.
    # Call the `prepare_line` function with the input `line` and store the result in a new variable, for example `cleaned_line`.
    # EDIT: Modify the for loop below to iterate over each `letter` in the `cleaned_line` variable you just created, instead of calling the function directly.
    for letter in prepare_line(line):
        if letter in "aeiouy":
            vowel_count += 1
    
    # EDIT: The loop above counted every vowel, but we need to treat diphthongs as a single vowel. For example, "ae" was counted as 2 vowels ('a' and 'e'), but should be counted as 1. We will now correct the count.
    # EDIT: First, create a list of strings named `diphthongs`. This list should contain the diphthongs we need to check for: "ae", "oe", "ei", "ea", "ia", "io", "aea".
    # EDIT: Now, create a loop that iterates through each `diphthong` in your `diphthongs` list.
    # EDIT: Inside the loop, we will adjust the `vowel_count`. For each occurrence of a diphthong, we have overcounted by `length of the diphthong - 1`.
    # For example, for "ae" (length 2), we overcounted by 1. For "aea" (length 3), we overcounted by 2.
    # EDIT: So, inside the loop, subtract `(len(diphthong) - 1)` multiplied by the number of times that `diphthong` appears in `cleaned_line`. You can use the `cleaned_line.count(diphthong)` method to find this number.
    
    return vowel_count

===============
```py
import string

def prepare_line(line):
    for char in string.punctuation:
        line = line.replace(char, "")
    for char in string.digits:
        line = line.replace(char, "")
    return line

def vowel_count(line):
    vowel_count = 0
    # EDIT: To perform the different counting steps, it's best to have the cleaned-up line available in a variable.
    # Call the `prepare_line` function with the input `line` and store the result in a new variable, for example `cleaned_line`.
    # EDIT: Modify the for loop below to iterate over each `letter` in the `cleaned_line` variable you just created, instead of calling the function directly.
    for letter in prepare_line(line):
        if letter in "aeiouy":
            vowel_count += 1
    
    # EDIT: The loop above counted every vowel, but we need to treat diphthongs as a single vowel. For example, "ae" was counted as 2 vowels ('a' and 'e'), but should be counted as 1. We will now correct the count.
    # EDIT: First, create a list of strings named `diphthongs`. This list should contain the diphthongs we need to check for: "ae", "oe", "ei", "ea", "ia", "io", "aea".
    # EDIT: Now, create a loop that iterates through each `diphthong` in your `diphthongs` list.
    # EDIT: Inside the loop, we will adjust the `vowel_count`. For each occurrence of a diphthong, we have overcounted by `length of the diphthong - 1`.
    # For example, for "ae" (length 2), we overcounted by 1. For "aea" (length 3), we overcounted by 2.
    # EDIT: So, inside the loop, subtract `(len(diphthong) - 1)` multiplied by the number of times that `diphthong` appears in `cleaned_line`. You can use the `cleaned_line.count(diphthong)` method to find this number.
    
    return vowel_count
```
