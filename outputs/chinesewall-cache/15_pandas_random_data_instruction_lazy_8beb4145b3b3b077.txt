[1754, 1763]
import pandas as pd
import random
import string


class GradeManipulator:

    def __init__(self):
        self.data = self._generate_random_data()

    def _generate_random_data(self):
        names = [''.join(random.choices(string.ascii_uppercase, k=5))
                 for _ in range(100)]
        ages = [random.randint(15, 25) for _ in range(100)]
        grades = random.choices(['A', 'B', 'C', 'D', 'F'], k=100)
        scores = [random.randint(0, 100) for _ in range(100)]

        return pd.DataFrame({
            'Name': names,
            'Age': ages,
            'Grade': grades,
            'Score': scores
        })

    # EDIT: Define a new method here called `average_score_by_grade`. It should not take any arguments other than `self`.
    # This method should calculate the average score for each unique grade in the dataframe.
    # 1. Access the DataFrame using `self.data`.
    # 2. Group the DataFrame by the 'Grade' column.
    # 3. From the grouped data, select the 'Score' column.
    # 4. Calculate the mean for this selection.
    # 5. The result of the mean calculation is a pandas Series. Convert it to a DataFrame. A simple way is to call `.reset_index()` on the Series.
    # 6. Return the resulting DataFrame.

    # EDIT: Define another new method here called `top_scorers`. It should take `self` and an integer `n` as arguments.
    # This method should return the top `n` students based on their scores.
    # 1. Access the DataFrame using `self.data`.
    # 2. Sort the DataFrame by the 'Score' column in descending order (from highest to lowest).
    # 3. Select the first `n` rows from the sorted DataFrame. The `.head()` method is useful here.
    # 4. Return this new DataFrame containing the top `n` students.

===============
```py
import pandas as pd
import random
import string


class GradeManipulator:

    def __init__(self):
        self.data = self._generate_random_data()

    def _generate_random_data(self):
        names = [''.join(random.choices(string.ascii_uppercase, k=5))
                 for _ in range(100)]
        ages = [random.randint(15, 25) for _ in range(100)]
        grades = random.choices(['A', 'B', 'C', 'D', 'F'], k=100)
        scores = [random.randint(0, 100) for _ in range(100)]

        return pd.DataFrame({
            'Name': names,
            'Age': ages,
            'Grade': grades,
            'Score': scores
        })

    # EDIT: Define a new method here called `average_score_by_grade`. It should not take any arguments other than `self`.
    # This method should calculate the average score for each unique grade in the dataframe.
    # 1. Access the DataFrame using `self.data`.
    # 2. Group the DataFrame by the 'Grade' column.
    # 3. From the grouped data, select the 'Score' column.
    # 4. Calculate the mean for this selection.
    # 5. The result of the mean calculation is a pandas Series. Convert it to a DataFrame. A simple way is to call `.reset_index()` on the Series.
    # 6. Return the resulting DataFrame.

    # EDIT: Define another new method here called `top_scorers`. It should take `self` and an integer `n` as arguments.
    # This method should return the top `n` students based on their scores.
    # 1. Access the DataFrame using `self.data`.
    # 2. Sort the DataFrame by the 'Score' column in descending order (from highest to lowest).
    # 3. Select the first `n` rows from the sorted DataFrame. The `.head()` method is useful here.
    # 4. Return this new DataFrame containing the top `n` students.
```
