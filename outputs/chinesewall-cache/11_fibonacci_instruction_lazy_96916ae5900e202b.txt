[1602, 1611]
class Fib:
    def __iter__(self):
        self.prev_prev = 0
        self.prev = 1
        return self
    def __next__(self):
        output = self.prev + self.prev_prev
        self.prev_prev = self.prev
        self.prev = output
        return output

    # EDIT: Define a new method here called `next_n_fibs`.
    # EDIT: This method should take one argument in addition to `self`, let's call it `n`.
    # EDIT: Add type hints. `n` is an `int`, and the method should return a `list` of `int`s.
    
        # EDIT: To avoid changing the state of the current Fib object, we need to create a temporary copy to work with.
        # EDIT: Create a new instance of the Fib class. Let's name it `temp_fib_generator`.
        
        # EDIT: The new generator starts from the beginning (0, 1). We need it to start from our current state.
        # EDIT: Copy the `prev_prev` value from the current object (`self`) to `temp_fib_generator`.
        # EDIT: Copy the `prev` value from the current object (`self`) to `temp_fib_generator`.

        # EDIT: Create an empty list to store the upcoming Fibonacci numbers. Let's call it `fib_numbers`.

        # EDIT: We need to generate `n` numbers. Create a `for` loop that will run `n` times.

            # EDIT: Inside the loop, get the next Fibonacci number from our temporary generator.
            # EDIT: You can do this by calling the `__next__` method on `temp_fib_generator`.
            
            # EDIT: Add the number you just generated to the `fib_numbers` list.

        # EDIT: After the loop has finished, return the `fib_numbers` list.

===============
```py
class Fib:
    def __iter__(self):
        self.prev_prev = 0
        self.prev = 1
        return self
    def __next__(self):
        output = self.prev + self.prev_prev
        self.prev_prev = self.prev
        self.prev = output
        return output

    # EDIT: Define a new method here called `next_n_fibs`.
    # EDIT: This method should take one argument in addition to `self`, let's call it `n`.
    # EDIT: Add type hints. `n` is an `int`, and the method should return a `list` of `int`s.
    
        # EDIT: To avoid changing the state of the current Fib object, we need to create a temporary copy to work with.
        # EDIT: Create a new instance of the Fib class. Let's name it `temp_fib_generator`.
        
        # EDIT: The new generator starts from the beginning (0, 1). We need it to start from our current state.
        # EDIT: Copy the `prev_prev` value from the current object (`self`) to `temp_fib_generator`.
        # EDIT: Copy the `prev` value from the current object (`self`) to `temp_fib_generator`.

        # EDIT: Create an empty list to store the upcoming Fibonacci numbers. Let's call it `fib_numbers`.

        # EDIT: We need to generate `n` numbers. Create a `for` loop that will run `n` times.

            # EDIT: Inside the loop, get the next Fibonacci number from our temporary generator.
            # EDIT: You can do this by calling the `__next__` method on `temp_fib_generator`.
            
            # EDIT: Add the number you just generated to the `fib_numbers` list.

        # EDIT: After the loop has finished, return the `fib_numbers` list.
```
