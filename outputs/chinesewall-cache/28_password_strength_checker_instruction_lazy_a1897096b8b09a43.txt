[1341, 1350]
# EDIT: Create a new function here called `containsSpecialChar`. It should accept one argument, `password`.
# EDIT: Inside the `containsSpecialChar` function, you will check if the password string contains any special characters.
# 1. First, create a string variable named `special_characters` and assign it a string of characters to consider special, for example: "!@#$%^&*()-_=+".
# 2. Then, iterate through each character of the `password` string using a for loop.
# 3. In each iteration, check if the current character is present in your `special_characters` string.
# 4. If you find a special character, the function should immediately return `True`.
# 5. If the loop finishes without finding any special characters, it means there are none, so the function should return `False` after the loop.

def minLength(password):
    assert type(password) == str
    return len(password) >= 8

def isPasswordStrong(password):
    # EDIT: Update this return statement. A strong password must now also contain a special character.
    # EDIT: The function should return `True` only if `minLength(password)` is true AND the new `containsSpecialChar(password)` function also returns true.
    # EDIT: You can achieve this by calling both functions and combining their boolean results with the `and` logical operator.
    return minLength(password)

===============
```py
# EDIT: Create a new function here called `containsSpecialChar`. It should accept one argument, `password`.
# EDIT: Inside the `containsSpecialChar` function, you will check if the password string contains any special characters.
# 1. First, create a string variable named `special_characters` and assign it a string of characters to consider special, for example: "!@#$%^&*()-_=+".
# 2. Then, iterate through each character of the `password` string using a for loop.
# 3. In each iteration, check if the current character is present in your `special_characters` string.
# 4. If you find a special character, the function should immediately return `True`.
# 5. If the loop finishes without finding any special characters, it means there are none, so the function should return `False` after the loop.

def minLength(password):
    assert type(password) == str
    return len(password) >= 8

def isPasswordStrong(password):
    # EDIT: Update this return statement. A strong password must now also contain a special character.
    # EDIT: The function should return `True` only if `minLength(password)` is true AND the new `containsSpecialChar(password)` function also returns true.
    # EDIT: You can achieve this by calling both functions and combining their boolean results with the `and` logical operator.
    return minLength(password)
```
