[1086, 1095]
def minLength(password):
    assert type(password) == str
    return len(password) >= 8

# EDIT: Define a new function here called `containsSpecialChar` that accepts one argument: `password`.
# EDIT: Inside this new function, create a string variable that holds all the special characters you want to check for (e.g., "!@#$%^&*()-+?_=,<>/").
# EDIT: Next, write a loop that iterates through each character of the `password` string.
# EDIT: Inside the loop, check if the current character is present in your string of special characters.
# EDIT: If a special character is found, the function should immediately return `True`.
# EDIT: If the loop finishes without finding any special characters, the function should return `False` after the loop.

def isPasswordStrong(password):
    # EDIT: Modify the return statement below.
    # EDIT: It should now check if BOTH `minLength(password)` is true AND the new `containsSpecialChar(password)` function returns true.
    # EDIT: Use the `and` logical operator to combine the results of the two function calls.
    return minLength(password)

===============
```py
def minLength(password):
    assert type(password) == str
    return len(password) >= 8

# EDIT: Define a new function here called `containsSpecialChar` that accepts one argument: `password`.
# EDIT: Inside this new function, create a string variable that holds all the special characters you want to check for (e.g., "!@#$%^&*()-+?_=,<>/").
# EDIT: Next, write a loop that iterates through each character of the `password` string.
# EDIT: Inside the loop, check if the current character is present in your string of special characters.
# EDIT: If a special character is found, the function should immediately return `True`.
# EDIT: If the loop finishes without finding any special characters, the function should return `False` after the loop.

def isPasswordStrong(password):
    # EDIT: Modify the return statement below.
    # EDIT: It should now check if BOTH `minLength(password)` is true AND the new `containsSpecialChar(password)` function returns true.
    # EDIT: Use the `and` logical operator to combine the results of the two function calls.
    return minLength(password)
```
