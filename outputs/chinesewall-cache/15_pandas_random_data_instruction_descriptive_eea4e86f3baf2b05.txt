[1820, 1829]
import pandas as pd
import random
import string


class GradeManipulator:

    def __init__(self):
        self.data = self._generate_random_data()

    def _generate_random_data(self):
        names = [''.join(random.choices(string.ascii_uppercase, k=5))
                 for _ in range(100)]
        ages = [random.randint(15, 25) for _ in range(100)]
        grades = random.choices(['A', 'B', 'C', 'D', 'F'], k=100)
        scores = [random.randint(0, 100) for _ in range(100)]

        return pd.DataFrame({
            'Name': names,
            'Age': ages,
            'Grade': grades,
            'Score': scores
        })

    # EDIT: Define a new method here called `average_score_by_grade`. It should take `self` as its only parameter.
    # This method will calculate the average score for each grade category.
    # 1. Access the DataFrame using `self.data`.
    # 2. Use the `.groupby()` method to group the rows based on the 'Grade' column.
    # 3. After grouping, select the 'Score' column. To make sure the output is a DataFrame, use double square brackets: `[['Score']]`.
    # 4. Chain the `.mean()` method to calculate the average score for each grade group.
    # 5. Return the resulting DataFrame.

    # EDIT: Define another method here called `top_scorers`. It should take `self` and a number `n` as parameters.
    # This method will find the students with the `n` highest scores.
    # 1. Access the DataFrame using `self.data`.
    # 2. Use the `.nlargest()` method to find the rows with the highest values in a specific column.
    # 3. The first argument for `.nlargest()` should be `n` (the number of top rows to return).
    # 4. The second argument should be the name of the column to sort by, which is 'Score'.
    # 5. Return the resulting DataFrame containing the top `n` students.

===============
```py
import pandas as pd
import random
import string


class GradeManipulator:

    def __init__(self):
        self.data = self._generate_random_data()

    def _generate_random_data(self):
        names = [''.join(random.choices(string.ascii_uppercase, k=5))
                 for _ in range(100)]
        ages = [random.randint(15, 25) for _ in range(100)]
        grades = random.choices(['A', 'B', 'C', 'D', 'F'], k=100)
        scores = [random.randint(0, 100) for _ in range(100)]

        return pd.DataFrame({
            'Name': names,
            'Age': ages,
            'Grade': grades,
            'Score': scores
        })

    # EDIT: Define a new method here called `average_score_by_grade`. It should take `self` as its only parameter.
    # This method will calculate the average score for each grade category.
    # 1. Access the DataFrame using `self.data`.
    # 2. Use the `.groupby()` method to group the rows based on the 'Grade' column.
    # 3. After grouping, select the 'Score' column. To make sure the output is a DataFrame, use double square brackets: `[['Score']]`.
    # 4. Chain the `.mean()` method to calculate the average score for each grade group.
    # 5. Return the resulting DataFrame.

    # EDIT: Define another method here called `top_scorers`. It should take `self` and a number `n` as parameters.
    # This method will find the students with the `n` highest scores.
    # 1. Access the DataFrame using `self.data`.
    # 2. Use the `.nlargest()` method to find the rows with the highest values in a specific column.
    # 3. The first argument for `.nlargest()` should be `n` (the number of top rows to return).
    # 4. The second argument should be the name of the column to sort by, which is 'Score'.
    # 5. Return the resulting DataFrame containing the top `n` students.
```
