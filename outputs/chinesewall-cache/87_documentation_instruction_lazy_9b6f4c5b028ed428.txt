[1660, 1669]
import ast

from typing import Tuple

def build_documentation(code: str) -> Tuple[str, str]:
    results = []
    parsed_ast = ast.parse(code)
    def visit_FunctionDef(node: ast.FunctionDef) -> None:
        name = node.name
        args_node = node.args
        return_annotation = node.returns
        if return_annotation is None:
            return_annotation = "None"
        else:
            return_annotation = return_annotation.id
        args = []
        for arg in args_node.args:
            # EDIT: The line below needs to be replaced with logic that can handle arguments that are missing a type annotation.
            # 1. Create a variable, for example `annotation_text`, to store the type as a string.
            # 2. Check if the argument's annotation, `arg.annotation`, is `None`.
            # 3. If it is `None`, it means there is no type hint, so assign the string "Any" to `annotation_text`.
            # 4. If it is not `None`, it means there is a type hint. Get the name of the type from `arg.annotation.id` and assign it to `annotation_text`.
            # 5. After your if/else logic, append the final formatted string to the `args` list. The format should be f"{arg.arg}: {annotation_text}".
            args.append(f"{arg.arg}: {arg.annotation}")
        function_signature = f"{name}({', '.join(args)}): {return_annotation}"
        docstring = ast.get_docstring(node)
        if docstring is None:
            docstring = ""
        results.append((function_signature, docstring))
    for node in ast.walk(parsed_ast):
        if isinstance(node, ast.FunctionDef):
            visit_FunctionDef(node)
    
    return results

===============
```py
import ast

from typing import Tuple

def build_documentation(code: str) -> Tuple[str, str]:
    results = []
    parsed_ast = ast.parse(code)
    def visit_FunctionDef(node: ast.FunctionDef) -> None:
        name = node.name
        args_node = node.args
        return_annotation = node.returns
        if return_annotation is None:
            return_annotation = "None"
        else:
            return_annotation = return_annotation.id
        args = []
        for arg in args_node.args:
            # EDIT: The line below needs to be replaced with logic that can handle arguments that are missing a type annotation.
            # 1. Create a variable, for example `annotation_text`, to store the type as a string.
            # 2. Check if the argument's annotation, `arg.annotation`, is `None`.
            # 3. If it is `None`, it means there is no type hint, so assign the string "Any" to `annotation_text`.
            # 4. If it is not `None`, it means there is a type hint. Get the name of the type from `arg.annotation.id` and assign it to `annotation_text`.
            # 5. After your if/else logic, append the final formatted string to the `args` list. The format should be f"{arg.arg}: {annotation_text}".
            args.append(f"{arg.arg}: {arg.annotation}")
        function_signature = f"{name}({', '.join(args)}): {return_annotation}"
        docstring = ast.get_docstring(node)
        if docstring is None:
            docstring = ""
        results.append((function_signature, docstring))
    for node in ast.walk(parsed_ast):
        if isinstance(node, ast.FunctionDef):
            visit_FunctionDef(node)
    
    return results
```
